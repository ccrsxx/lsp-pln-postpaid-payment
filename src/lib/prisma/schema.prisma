datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  role          Role      @default(USER)
  email         String    @unique
  image         String?
  password      String?
  kwhNumber     String    @unique @map("kwh_number")
  emailVerified DateTime? @map("email_verified")

  rateVariantId String @map("rate_variant_id")

  rateVariant RateVariant @relation(fields: [rateVariantId], references: [id])

  bill     Bill[]
  usage    Usage[]
  payment  Payment[]
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Account {
  type              String
  scope             String?
  provider          String
  id_token          String?
  expires_at        Int?
  token_type        String?
  access_token      String?
  session_state     String?
  refresh_token     String?
  providerAccountId String  @map("provider_account_id")

  userId String @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  expires      DateTime
  sessionToken String   @unique @map("session_token")

  userId String @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("session")
}

model VerificationToken {
  token      String
  expires    DateTime
  identifier String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([identifier, token])
  @@map("verification_token")
}

model RateVariant {
  id      String @id @default(uuid())
  name    String @unique
  feeRate Int    @map("fee_rate")

  user User[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("rate_variant")
}

model Usage {
  id         String  @id @default(uuid())
  active     Boolean @default(true)
  finalKwh   Float?  @map("final_kwh")
  initialKwh Float   @map("initial_kwh")

  userId String @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  bill Bill[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("usage")
}

model Bill {
  id            String @id @default(uuid())
  totalPrice    Float  @map("total_price")
  totalUsageKwh Float  @map("total_usage_kwh")

  userId  String @map("user_id")
  usageId String @map("usage_id")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage Usage @relation(fields: [usageId], references: [id], onDelete: Cascade)

  payment Payment[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("bill")
}

model Payment {
  id            String @id @default(uuid())
  accountName   String @map("account_name")
  accountNumber String @map("account_number")

  userId String @map("user_id")
  billId String @map("bill_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bill Bill @relation(fields: [billId], references: [id], onDelete: Cascade)

  status PaymentStatus @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("payment")
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  REJECTED
  COMPLETED
}
